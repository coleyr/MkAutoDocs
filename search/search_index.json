{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MKAutoDocs Code Documentation Repository \u00b6 Everthing on here has been generated by gpt This repository showcases the use of OpenAI's GPT-3.5 language model for generating documentation for code automatically. The generated documentation is then turned into a \"doc as code\" site for easy access and sharing. Getting Started \u00b6 To use this repository, you will need to have a valid OpenAI API key for GPT-3.5 language model and a codebase that you want to generate documentation for. Usage \u00b6 Clone or download this repository to your local machine. Set up your OpenAI API key in the .env file located in the root directory of the project. Install the required dependencies by running the following command: pip install -r requirements.txt Edit the configuration file to point to your code repository. Run python Auto_Doc.py to generate documentation for your code. Use MkDocs to turn the generated documentation into a \"doc as code\" site. Run mkdocs serve to preview the site or mkdocs build to generate a static website in the site directory. Contributing \u00b6 If you want to contribute to this repository, please feel free to open a pull request or an issue. We welcome any feedback, suggestions, or improvements to the code. License \u00b6 This repository is licensed under the MIT License. See the LICENSE file for more information.","title":"MKAutoDocs Code Documentation Repository"},{"location":"#mkautodocs-code-documentation-repository","text":"Everthing on here has been generated by gpt This repository showcases the use of OpenAI's GPT-3.5 language model for generating documentation for code automatically. The generated documentation is then turned into a \"doc as code\" site for easy access and sharing.","title":"MKAutoDocs Code Documentation Repository"},{"location":"#getting-started","text":"To use this repository, you will need to have a valid OpenAI API key for GPT-3.5 language model and a codebase that you want to generate documentation for.","title":"Getting Started"},{"location":"#usage","text":"Clone or download this repository to your local machine. Set up your OpenAI API key in the .env file located in the root directory of the project. Install the required dependencies by running the following command: pip install -r requirements.txt Edit the configuration file to point to your code repository. Run python Auto_Doc.py to generate documentation for your code. Use MkDocs to turn the generated documentation into a \"doc as code\" site. Run mkdocs serve to preview the site or mkdocs build to generate a static website in the site directory.","title":"Usage"},{"location":"#contributing","text":"If you want to contribute to this repository, please feel free to open a pull request or an issue. We welcome any feedback, suggestions, or improvements to the code.","title":"Contributing"},{"location":"#license","text":"This repository is licensed under the MIT License. See the LICENSE file for more information.","title":"License"},{"location":"Auto_Doc/","text":"auto_doc.py Module \u00b6 The auto_doc module is a Python code export optimised for auto generating documentation in MkDocs . Dependencies \u00b6 OpenAI, YAML, os, pathlib, dotenv and re. Functions \u00b6 chat_completion(user:str, system:str, model:str=\"gpt-3.5-turbo\", temperature=None, max_tokens=None)->openai.ChatCompletion.create: \u00b6 Generates chat completions using Open AI's Chat model API. Inputs \u00b6 user:str : The user's input to generate a response. system:str : The response provided by the Chat model API. model:str : The name of the model to use for generating completions. The first time you use a new model, OpenAI will cache the model to your computer, so it may take a short amount of extra time to generate the first completion. Defaults to \"gpt-3.5-turbo\". temperature=None : What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer. max_tokens=None : The maximum number of tokens(common sequences of characters found in text) to generate in the completion. If both duration and max_tokens are set, the API will return whichever response is generated first. Output \u00b6 OpenAI ChatCompletion.create object. folder_structure(path:str) -> dict: \u00b6 Returns a dictionary of the file and folder structure from the folders. Inputs \u00b6 path:str : The path to the folder. Output \u00b6 Dictionary of the file and folder structure. write_md_documentation(code: str) -> str: \u00b6 Returns a string of markdown format from a given python code. Inputs \u00b6 code: str : The python code to generate the documentation for. Output \u00b6 Returns a string of markdown format. make_dir(path) \u00b6 Method creates a directory. Inputs \u00b6 path:str : The path to create the directory in. ignore_checks(path_string) \u00b6 Method checks if the path_string regex can be ignored. Inputs \u00b6 path_string:str : The path of the string value to check. make_save_folder(folder:str, root_dir:str, docs_path:str) -> Path \u00b6 Returns Path Object. Inputs \u00b6 folder:str : The name of the folder. root_dir:str : The root directory. docs_path:str : Path in the document directory. Output \u00b6 Returns Path Object. get_file_documentation(files:list, save_path:Path) -> None: \u00b6 Method to create an MD file for the given file. Inputs \u00b6 files:list : The files to create documentation for. save_path:Path : The path to the directory to save MD files in. get_markdown(source_folder_dir:dir, save_folder:Path, root_doc:str, docs_path:str): \u00b6 Method to generate markdown and access nested directories. Inputs \u00b6 source_folder_dir:dir : The directory to create documentation for. save_folder:Path : The path to the directory to save MD files in. root_doc:str : The path to the root directory. docs_path:str : The folder structure and paths. make_mkdocs_yaml(root_dir:str) -> None: \u00b6 Generates mkdocs.yml. Inputs \u00b6 root_dir:str : The root directory. update_requirements(requirement: str, version: str, file_path: str = \"requirements.txt\")->None: \u00b6 Updates versions in requirements.txt. Inputs \u00b6 requirement:str : The required package. version : The version of the package. file_path:str = requirements.txt : The file path for the requirements.txt file. make_mkdocs_documents(): \u00b6 Generates the documentation.","title":"`auto_doc.py` Module"},{"location":"Auto_Doc/#auto_docpy-module","text":"The auto_doc module is a Python code export optimised for auto generating documentation in MkDocs .","title":"auto_doc.py Module"},{"location":"Auto_Doc/#dependencies","text":"OpenAI, YAML, os, pathlib, dotenv and re.","title":"Dependencies"},{"location":"Auto_Doc/#functions","text":"","title":"Functions"},{"location":"Auto_Doc/#chat_completionuserstr-systemstr-modelstrgpt-35-turbo-temperaturenone-max_tokensnone-openaichatcompletioncreate","text":"Generates chat completions using Open AI's Chat model API.","title":"chat_completion(user:str, system:str, model:str=\"gpt-3.5-turbo\", temperature=None, max_tokens=None)-&gt;openai.ChatCompletion.create:"},{"location":"Auto_Doc/#inputs","text":"user:str : The user's input to generate a response. system:str : The response provided by the Chat model API. model:str : The name of the model to use for generating completions. The first time you use a new model, OpenAI will cache the model to your computer, so it may take a short amount of extra time to generate the first completion. Defaults to \"gpt-3.5-turbo\". temperature=None : What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer. max_tokens=None : The maximum number of tokens(common sequences of characters found in text) to generate in the completion. If both duration and max_tokens are set, the API will return whichever response is generated first.","title":"Inputs"},{"location":"Auto_Doc/#output","text":"OpenAI ChatCompletion.create object.","title":"Output"},{"location":"Auto_Doc/#folder_structurepathstr-dict","text":"Returns a dictionary of the file and folder structure from the folders.","title":"folder_structure(path:str) -&gt; dict:"},{"location":"Auto_Doc/#inputs_1","text":"path:str : The path to the folder.","title":"Inputs"},{"location":"Auto_Doc/#output_1","text":"Dictionary of the file and folder structure.","title":"Output"},{"location":"Auto_Doc/#write_md_documentationcode-str-str","text":"Returns a string of markdown format from a given python code.","title":"write_md_documentation(code: str) -&gt; str:"},{"location":"Auto_Doc/#inputs_2","text":"code: str : The python code to generate the documentation for.","title":"Inputs"},{"location":"Auto_Doc/#output_2","text":"Returns a string of markdown format.","title":"Output"},{"location":"Auto_Doc/#make_dirpath","text":"Method creates a directory.","title":"make_dir(path)"},{"location":"Auto_Doc/#inputs_3","text":"path:str : The path to create the directory in.","title":"Inputs"},{"location":"Auto_Doc/#ignore_checkspath_string","text":"Method checks if the path_string regex can be ignored.","title":"ignore_checks(path_string)"},{"location":"Auto_Doc/#inputs_4","text":"path_string:str : The path of the string value to check.","title":"Inputs"},{"location":"Auto_Doc/#make_save_folderfolderstr-root_dirstr-docs_pathstr-path","text":"Returns Path Object.","title":"make_save_folder(folder:str, root_dir:str, docs_path:str) -&gt; Path"},{"location":"Auto_Doc/#inputs_5","text":"folder:str : The name of the folder. root_dir:str : The root directory. docs_path:str : Path in the document directory.","title":"Inputs"},{"location":"Auto_Doc/#output_3","text":"Returns Path Object.","title":"Output"},{"location":"Auto_Doc/#get_file_documentationfileslist-save_pathpath-none","text":"Method to create an MD file for the given file.","title":"get_file_documentation(files:list, save_path:Path) -&gt; None:"},{"location":"Auto_Doc/#inputs_6","text":"files:list : The files to create documentation for. save_path:Path : The path to the directory to save MD files in.","title":"Inputs"},{"location":"Auto_Doc/#get_markdownsource_folder_dirdir-save_folderpath-root_docstr-docs_pathstr","text":"Method to generate markdown and access nested directories.","title":"get_markdown(source_folder_dir:dir, save_folder:Path, root_doc:str, docs_path:str):"},{"location":"Auto_Doc/#inputs_7","text":"source_folder_dir:dir : The directory to create documentation for. save_folder:Path : The path to the directory to save MD files in. root_doc:str : The path to the root directory. docs_path:str : The folder structure and paths.","title":"Inputs"},{"location":"Auto_Doc/#make_mkdocs_yamlroot_dirstr-none","text":"Generates mkdocs.yml.","title":"make_mkdocs_yaml(root_dir:str) -&gt; None:"},{"location":"Auto_Doc/#inputs_8","text":"root_dir:str : The root directory.","title":"Inputs"},{"location":"Auto_Doc/#update_requirementsrequirement-str-version-str-file_path-str-requirementstxt-none","text":"Updates versions in requirements.txt.","title":"update_requirements(requirement: str, version: str, file_path: str = \"requirements.txt\")-&gt;None:"},{"location":"Auto_Doc/#inputs_9","text":"requirement:str : The required package. version : The version of the package. file_path:str = requirements.txt : The file path for the requirements.txt file.","title":"Inputs"},{"location":"Auto_Doc/#make_mkdocs_documents","text":"Generates the documentation.","title":"make_mkdocs_documents():"}]}